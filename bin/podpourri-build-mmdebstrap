#!/bin/sh
#
# podpourri-build - Uses *podman* to build and push a container image build
# file found at *context* directory.

set -eu

CONFIGFILE="${HOME}/.config/podpourri/podpourri.conf"
REGISTRY_PREFIX="$(/usr/bin/env git config --file "${CONFIGFILE}" registry.prefix || echo)"

DPKGOPT_DEFAULT=<<EOF
path-exclude=/usr/share/man/*
path-include=/usr/share/man/man[1-9]/*
path-exclude=/usr/share/locale/*
path-include=/usr/share/locale/locale.alias
path-exclude=/usr/share/{doc,info,man,omf,help,gnome/help}/*
path-include=/usr/share/doc/*/copyright
path-exclude=/usr/share/lintian/*
path-exclude=/usr/share/linda/*
EOF

# Print usage message and exit.
usage() {
    echo "${0}: context jobtag podman mmdebstrap"
    return 1
}

podpourri_build_mmdebstrap() {
    WORKDIR="${1}"
    CONTEXT="${2}"
    JOBTAG="${3}"
    PODMAN="${4}"
    MMDEBSTRAP="${5}"
    shift 5

    BRANCH="$(/usr/bin/env git rev-parse --abbrev-ref HEAD)"

    case "${BRANCH}" in
        *[!a-zA-Z0-9-_.]*)
            echo "Podpourri: Invalid ref, not running build" >&2
            ;;

        *)
            ORIGIN="$(/usr/bin/env git remote get-url origin)"
            IMAGE_NAME="${ORIGIN%/}"
            IMAGE_NAME="${IMAGE_NAME##*[:/]}"
            IMAGE_NAME="${IMAGE_NAME%.git}"

            ARCHIVE="${WORKDIR}/root.tar"

            DPKGOPT="${CONTEXT}/dpkg.cfg"
            if [ ! -e "${DPKGOPT}" ]; then
                DPKGOPT="${WORKDIR}/dpkg.cfg"
                echo "${DPKGOPT_DEFAULT}" > "${DPKGOPT}"
            fi

            SOURCESLIST="${CONTEXT}/sources.list"
            if [ ! -e "${SOURCESLIST}" ]; then
                SOURCESLIST="/etc/apt/sources.list"
            fi

            # https://reproducible-builds.org/docs/source-date-epoch/#git
            /usr/bin/env \
                SOURCE_DATE_EPOCH="$(/usr/bin/env git log -1 --pretty=%ct)" \
                "${MMDEBSTRAP}" \
                --verbose \
                --dpkgopt="${DPKGOPT}" \
                --variant=required \
                < "${SOURCESLIST}" > "${ARCHIVE}"

            ARCHIVE_DGST_OUT="$(/usr/bin/env sha256sum "${ARCHIVE}")"
            ARCHIVE_DGST="[sha256:${ARCHIVE_DGST_OUT%% *}]"

            EXISTING_DGST=""
            if /usr/bin/env "${PODMAN}" image pull "${REGISTRY_PREFIX}${IMAGE_NAME}:${BRANCH}"; then
                EXISTING_DGST="$(/usr/bin/env "${PODMAN}" image inspect --format '{{.RootFS.Layers}}' "${REGISTRY_PREFIX}${IMAGE_NAME}:${BRANCH}")"
            fi

            if [ "${ARCHIVE_DGST}" != "${EXISTING_DGST}" ]; then
                /usr/bin/env "${PODMAN}" image import \
                    "${ARCHIVE}" \
                    "${REGISTRY_PREFIX}${IMAGE_NAME}:${JOBTAG}" \
                    "${REGISTRY_PREFIX}${IMAGE_NAME}:${BRANCH}" \
                echo "Podpourri: Imported ${REGISTRY_PREFIX}${IMAGE_NAME}:${JOBTAG}" >&2

                if [ -n "${REGISTRY_PREFIX}" ]; then
                    /usr/bin/env "${PODMAN}" image push \
                        "${REGISTRY_PREFIX}${IMAGE_NAME}:${JOBTAG}"
                    echo "Podpourri: Pushed ${REGISTRY_PREFIX}${IMAGE_NAME}:${JOBTAG}" >&2
                    /usr/bin/env "${PODMAN}" image push \
                        "${REGISTRY_PREFIX}${IMAGE_NAME}:${BRANCH}"
                    echo "Podpourri: Pushed ${REGISTRY_PREFIX}${IMAGE_NAME}:${BRANCH}" >&2
                fi
            else
                echo "Podpourri: Image is up-to-date: ${REGISTRY_PREFIX}${IMAGE_NAME}:${JOBTAG}" >&2
            fi
            ;;
    esac
}


# Setup temp dir.
WORKDIR="$(${MKTEMP} -d)"
cleanup() {
    ${RM} -rf "${WORKDIR}"
}
trap cleanup EXIT

if [ "${#}" -gt 3 ] && [ "${1:-}" != "-h" ] && [ "${1:-}" != "--help" ]; then
    podpourri_build_mmdebstrap "${WORKDIR}" "${@}"
else
    usage
fi
