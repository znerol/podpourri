#!/bin/sh
#
# podpourri-build-mmdebstrap - Uses *mmdebstrap* to build a reproducible base
# image.

set -eu

DPKGOPT_DEFAULT="$(cat <<'EOF'
path-exclude=/usr/share/man/*
path-include=/usr/share/man/man[1-9]/*
path-exclude=/usr/share/locale/*
path-include=/usr/share/locale/locale.alias
path-exclude=/usr/share/{doc,info,man,omf,help,gnome/help}/*
path-include=/usr/share/doc/*/copyright
path-exclude=/usr/share/lintian/*
path-exclude=/usr/share/linda/*
EOF
)"

# Print usage message and exit.
usage() {
    echo "${0}: context config-name image-tag"
    return 1
}

podpourri_build_mmdebstrap() {
    CONTEXT="${1}"
    CONFIG_NAME="${2}"
    IMAGE_TAG="${3}"
    shift 3

    REPOCONFIG="${CONTEXT}/.podpourri.conf"

    DPKGOPT="$(git config --file "${REPOCONFIG}" --type path --get "podpourri-image.${CONFIG_NAME}.dpkgOptFile" || echo)"
    SOURCESLIST="$(git config --file "${REPOCONFIG}" --type path --get "podpourri-image.${CONFIG_NAME}.aptSourcesFile" || echo "/etc/apt/sources.list")"

    # Setup temp dir.
    ARCHIVE="$(mktemp)"
    cleanup() {
        rm -f "${ARCHIVE}"
    }
    trap cleanup EXIT

    if [ -z "${DPKGOPT}" ]; then
        # File needs to be accessible from unshared user namespace. Make it
        # world readable.
        DPKGOPT="$(mktemp)"
        chmod 0644 "${DPKGOPT}"
        cleanup() {
            rm -f "${DPKGOPT}"
            rm -f "${ARCHIVE}"
        }
        trap cleanup EXIT
        echo "${DPKGOPT_DEFAULT}" > "${DPKGOPT}"
    fi

    # https://reproducible-builds.org/docs/source-date-epoch/#git
    if [ -z "${SOURCE_DATE_EPOCH:-}" ]; then
        SOURCE_DATE_EPOCH="$(git log -1 --pretty=%ct)"
    fi
    (cd "${CONTEXT}" && exec /usr/bin/env \
        SOURCE_DATE_EPOCH="${SOURCE_DATE_EPOCH}" \
        mmdebstrap \
        --verbose \
        --dpkgopt="${DPKGOPT}" \
        --variant=required \
        < "${SOURCESLIST}" > "${ARCHIVE}"
    )

    ARCHIVE_DGST_OUT="$(sha256sum "${ARCHIVE}")"
    ARCHIVE_DGST="[sha256:${ARCHIVE_DGST_OUT%% *}]"

    EXISTING_DGST=""
    if command podman image exists "${IMAGE_TAG}"; then
        EXISTING_DGST="$(command podman image inspect --format '{{.RootFS.Layers}}' "${IMAGE_TAG}")"
    fi

    if [ "${ARCHIVE_DGST}" != "${EXISTING_DGST}" ]; then
        command podman image import "${ARCHIVE}" "${IMAGE_TAG}"
        echo "Podpourri: Imported ${IMAGE_TAG}" >&2
    else
        echo "Podpourri: Image is up-to-date: ${IMAGE_TAG}" >&2
    fi
}

if [ "${#}" -gt 2 ] && [ "${1:-}" != "-h" ] && [ "${1:-}" != "--help" ]; then
    podpourri_build_mmdebstrap "${@}"
else
    usage
fi
