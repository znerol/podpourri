#!/bin/sh
#
# podpourri-build - Builds all images specified in .podpourri.conf found at the
# root of the checked out git working directory.

set -eu

# Print usage message and exit.
usage() {
    echo "${0}: [-n] [context] [jobtag]"
    return 1
}

podpourri_build() {
    USE_REGISTRY="true"
    if { [ "${1}" = "-n" ] || [ "${1}" = "--no-registry" ]; }; then
        USE_REGISTRY="false"
        shift 1
    fi

    CONTEXT="$(realpath "${1:-.}")"
    JOBTAG="${2:-}"

    REPOCONFIG="${CONTEXT}/.podpourri.conf"

    if [ -f "${REPOCONFIG}" ]; then

        BRANCH="$(git rev-parse --abbrev-ref HEAD)"

        case "${BRANCH}" in
            *[!a-zA-Z0-9-_.]*)
                echo "Podpourri: Invalid ref, not running build" >&2
                ;;
            *)
                REGISTRY_PREFIX="$(git config --file "${REPOCONFIG}" --get podpourri.registryPrefix || echo)"

                PULL_PERMITTED=1
                PULL_EXCLUDE_JOB_PREFIX="$(git config --file "${REPOCONFIG}" --get-all podpourri.pullExcludeJobPrefix || echo)"
                for EXCLUDE_JOB_PREFIX in ${PULL_EXCLUDE_JOB_PREFIX}; do
                    if [ "${JOBTAG}" != "${JOBTAG##"${EXCLUDE_JOB_PREFIX}"}" ]; then
                        echo "Podpourri: Disable pulling, jobtag matches ${EXCLUDE_JOB_PREFIX}" >&2
                        PULL_PERMITTED=0
                    fi
                done

                if [ "${PULL_PERMITTED}" -eq "1" ]; then
                    PULLS="$(git config --file "${REPOCONFIG}" --get-all podpourri.pull || echo)"
                    for IMAGE_NAME in ${PULLS}; do
                        command podman image pull "$IMAGE_NAME"
                        echo "Podpourri: Pulled ${IMAGE_NAME}" >&2
                    done
                fi

                IMAGES="$(git config --file "${REPOCONFIG}" --get-all podpourri.image || echo)"

                for IMAGE_NAME in ${IMAGES}; do
                    BUILD_METHOD="$(git config --file "${REPOCONFIG}" --get "podpourri-image.${IMAGE_NAME}.method" || echo "podman")"

                    DEFAULT_CACHE="false"
                    if [ "${BUILD_METHOD}" = "mmdebstrap" ]; then
                        DEFAULT_CACHE="true"
                    fi

                    BUILD_CACHE="$(git config --file "${REPOCONFIG}" --type bool --get "podpourri-image.${IMAGE_NAME}.cache" || echo "${DEFAULT_CACHE}")"
                    if [ "${BUILD_CACHE}" = "true" ] && [ "${USE_REGISTRY}" = "true" ] && [ -n "${REGISTRY_PREFIX}" ]; then
                        command podman image pull \
                          "${REGISTRY_PREFIX}${IMAGE_NAME}:${BRANCH}" || true
                        echo "Podpourri: Pulled build cache from ${REGISTRY_PREFIX}${IMAGE_NAME}:${BRANCH}" >&2
                    fi

                    command "podpourri-build-${BUILD_METHOD}" \
                      "${CONTEXT}" \
                      "${IMAGE_NAME}" \
                      "${REGISTRY_PREFIX}${IMAGE_NAME}:${BRANCH}"

                    if [ -n "${JOBTAG}" ]; then
                        command podman image tag \
                            "${REGISTRY_PREFIX}${IMAGE_NAME}:${BRANCH}" \
                            "${REGISTRY_PREFIX}${IMAGE_NAME}:${JOBTAG}"
                        echo "Podpourri: Tagged ${REGISTRY_PREFIX}${IMAGE_NAME}:${JOBTAG}" >&2
                    fi

                    if [ "${USE_REGISTRY}" = "true" ] && [ -n "${REGISTRY_PREFIX}" ]; then
                        if [ -n "${JOBTAG}" ]; then
                            command podman image push \
                                "${REGISTRY_PREFIX}${IMAGE_NAME}:${JOBTAG}"
                            echo "Podpourri: Pushed ${REGISTRY_PREFIX}${IMAGE_NAME}:${JOBTAG}" >&2
                        fi

                        command podman image push \
                            "${REGISTRY_PREFIX}${IMAGE_NAME}:${BRANCH}"
                        echo "Podpourri: Pushed ${REGISTRY_PREFIX}${IMAGE_NAME}:${BRANCH}" >&2
                    fi
                done
        esac
    fi
}

if [ "${1:-}" != "-h" ] && [ "${1:-}" != "--help" ]; then
    podpourri_build "${@}"
else
    usage
fi
